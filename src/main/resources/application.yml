server:
  port: 8083
  servlet:
    context-path: /authz
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: on-param
    include-exception: false

spring:
  application:
    name: authorization-service

  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5003/authz_db}
    username: ${DB_USERNAME:authz_user}
    password: ${DB_PASSWORD:authz_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:20}
      minimum-idle: ${DB_MIN_IDLE:5}
      idle-timeout: 300000
      connection-timeout: 30000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        generate_statistics: false
    show-sql: false
    open-in-view: false

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: 3
      timeout: 5000
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 4
          max-wait: -1ms

  kafka:
    bootstrap-servers: ${KAFKA_BROKERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
      acks: all
      retries: 3
      properties:
        schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8081}
        auto.register.schemas: true
        enable.auto.commit: false

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
      group-id: authorization-service
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8081}
        specific.protobuf.value.type: com.google.protobuf.DynamicMessage

    topics:
      # Authorization Events
      authorization-checked: nnipa.events.authz.checked
      role-created: nnipa.events.authz.role.created
      role-updated: nnipa.events.authz.role.updated
      role-deleted: nnipa.events.authz.role.deleted
      role-assigned: nnipa.events.authz.role.assigned
      role-revoked: nnipa.events.authz.role.revoked
      permission-granted: nnipa.events.authz.permission.granted
      permission-revoked: nnipa.events.authz.permission.revoked
      policy-created: nnipa.events.authz.policy.created
      policy-updated: nnipa.events.authz.policy.updated
      policy-evaluated: nnipa.events.authz.policy.evaluated
      resource-protected: nnipa.events.authz.resource.protected

  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=10000,expireAfterWrite=5m
    cache-names:
      - permissions
      - roles
      - policies
      - user-permissions
      - tenant-permissions

# Authorization Service Configuration
authz:
  cache:
    permission-ttl: ${PERMISSION_CACHE_TTL:300} # 5 minutes
    role-ttl: ${ROLE_CACHE_TTL:600} # 10 minutes
    policy-ttl: ${POLICY_CACHE_TTL:600} # 10 minutes

  evaluation:
    max-policy-depth: ${MAX_POLICY_DEPTH:10}
    enable-audit-logging: ${ENABLE_AUDIT_LOGGING:true}

  default-roles:
    - SUPER_ADMIN
    - TENANT_ADMIN
    - USER
    - VIEWER

  system-permissions:
    - SYSTEM_MANAGE
    - TENANT_MANAGE
    - USER_MANAGE
    - ROLE_MANAGE
    - PERMISSION_MANAGE

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      tenant-service:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10000
        permitted-number-of-calls-in-half-open-state: 3
      auth-service:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10000

  retry:
    instances:
      tenant-service:
        max-attempts: 3
        wait-duration: 1000
        retry-exceptions:
          - java.net.ConnectException
          - java.io.IOException

# Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,cache
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    circuitbreakers:
      enabled: true
  metrics:
    tags:
      service: authorization-service
  prometheus:
    metrics:
      export:
        enabled: true

# Logging
logging:
  level:
    com.nnipa.authz: DEBUG
    org.springframework.security: DEBUG
    org.springframework.cache: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/authorization-service.log
    max-size: 10MB
    max-history: 30